<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Pipou's world]]></title><description><![CDATA[__̴ı̴̴̡̡̡ ̡͌l̡̡̡ ̡͌l̡*̡̡ ̴̡ı̴̴̡ ̡̡͡|̲̲̲͡͡͡ ̲▫̲͡ ̲̲̲͡͡π̲̲͡͡ ̲̲͡▫̲̲͡͡ ̲|̡̡̡ ̡ ̴̡ı̴̡̡ ̡͌l̡̡̡̡.]]></description><link>https://remi-hernandez.github.io</link><generator>RSS for Node</generator><lastBuildDate>Mon, 10 Sep 2018 14:22:06 GMT</lastBuildDate><atom:link href="https://remi-hernandez.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Rust tips n tricks]]></title><description><![CDATA[<div class="sect1">
<h2 id="_basics">Basics</h2>
<div class="sectionbody">
<div class="paragraph">
<p>E.g.: basic program</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-rust" data-lang="rust">use std::fmt::*;


fn add(nb1: i32, nb2: i32) -&gt; i32 {
    nb1 + nb2 // return is implicit if don't put ";"
}

fn test_return() -&gt; i32 {
    return 42; // a more classical return
}

fn print_vector(value: Vec&lt;i32&gt;) {
    println!("print vector : {:?}", value);
}

fn print_vector_by_ref(value: &amp;Vec&lt;i32&gt;) {
    println!("print vector : {:?}", value);
}


/* Foo struct */
struct Foo {
    value: i32
}

impl Foo {
    fn new(value: i32) -&gt; Foo {
        Foo {value: value} // will return implicitly
    }

    fn get_value(&amp;self) -&gt; i32 {
        self.value
    }

    fn set_value(&amp; mut self, new_val: i32) { // important, self is mutable in order to be modified
        self.value = new_val;
    }
}

impl Debug for Foo { // implémentation du trait debug
    fn fmt(&amp;self, f: &amp;mut Formatter) -&gt; Result {
        write!(f, "Foo {{ val: {}}}", self.value)
    }
}

impl Drop for Foo { // Destructor
    fn drop(&amp;mut self) {
        println!("drop of {:?}", self);
    }
}

/* Bar struct */
#[derive(Debug)] // génere des implémentations pour des traits
struct Bar&lt;'b&gt; { // 'b is a lifetime (can use any letter)
    foo: &amp;'b Foo // foo must live at least as Bar
}

impl &lt;'b&gt;Drop for Bar&lt;'b&gt; {
    fn drop(&amp;mut self) {
        println!("drop of {:?}", self);
    }
}

fn main() {
    println!("2 + 4 = {}", add(2, 4));
    println!("test return : {}", test_return());

    let value = vec!(42, 4242);
    print_vector(value);
    // this cannot be done because the ownership of
    // value is given to print_vector
    //print_vector(value);

    // to do this you must give a ref like this :
    let value2 = vec!(24, 2424);
    print_vector_by_ref(&amp;value2);
    print_vector_by_ref(&amp;value2);

    let mut foo = Foo::new(42);
    println!("foo value before : {}", foo.get_value());
    foo.set_value(4242);
    println!("foo value after : {}", foo.get_value());

    println!("{:?}", foo); // affiche en debug grace a :?

    let bar = Bar {foo: &amp;foo};

    println!("bar = {:?}", bar);
    println!("foo = {:?}", foo);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_lambda_example">lambda example</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre>fn lambda_example() {
    let add = |x, y| x + y;
    println!("lambda add 2 + 2 = {}", add(2, 2));
}</pre>
</div>
</div>
</div>
</div>]]></description><link>https://remi-hernandez.github.io/2018/05/24/Rust-tips-n-tricks.html</link><guid isPermaLink="true">https://remi-hernandez.github.io/2018/05/24/Rust-tips-n-tricks.html</guid><category><![CDATA[Rust]]></category><category><![CDATA[tips]]></category><category><![CDATA[tricks]]></category><dc:creator><![CDATA[Remi Hernandez]]></dc:creator><pubDate>Thu, 24 May 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Spacemacs]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>#+TITLE: This is spacemacs title</p>
</div>
<div class="paragraph">
<p>#+OPTIONS: toc:nil</p>
</div>
</div>
</div>
<h1 id="_org" class="sect0">Org</h1>
<div class="sect1">
<h2 id="_categories">categories</h2>
<div class="sectionbody">
<div class="literalblock">
<div class="content">
<pre>#+BEGIN_SRC c++
void process_stuff(my_super_class* ptr)
int a = 2;
#+END_SRC</pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>#+BEGIN_SRC python
  def example(a, b):
     """
     in a src block use ctrlc ' (ctrlc + single quote) to edit the code block in editor
     use ctrlc ctrlc to evaluate it and made appear the results (but doesn't work for now)
     """
     print ("will process {} + {}".format(a, b))
     return (a,b)
  example(2, 18)
#+END_SRC</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_commands">Commands</h2>
<div class="sectionbody">
<div class="literalblock">
<div class="content">
<pre>| command        | action                                           |
|----------------+--------------------------------------------------|
| shift tab      | changes  fold                                    |
| ctrlc and wait | all the commands with description will displayed |
| ctrlc ctrle    | export file                                      |
| ctrlc ctrlc    | compute part                                     |
| ctrlc ctrlt    | cycle through TODO states                        |
| ctrlc ctrld    | add a deadline to a TODO element                 |
| ctrlc ctrls    | append a datetime                                |</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_spc_commands">SPC commands</h2>
<div class="sectionbody">
<div class="literalblock">
<div class="content">
<pre>spc mee    - export in different kind of files</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_todo_cie">Todo &amp; cie</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>TODO todo example
DEADLINE: &lt;2018-04-20 Fri&gt;
at the end of the title line (after example here) hit shift alt enter
to go to the next line with another todo
use ctrlc ctrld to add a deadline do a todo element</p>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>under task one.</p>
</li>
<li>
<p>[ ] under task two.</p>
</li>
<li>
<p>[ ]</p>
</li>
</ol>
</div>
</li>
<li>
<p>DONE clycle through states
CLOSED: [2018-05-15 Tue 13:16]
use ctrlc ctrlt tou cylcle through states</p>
</li>
<li>
<p>use list [1/2]
use ctrlc ctrlc on one line to set or unset the state</p>
<div class="ulist checklist">
<ul class="checklist">
<li>
<p><i class="fa fa-square-o"></i> task one</p>
</li>
<li>
<p>[X] task two</p>
</li>
</ul>
</div>
</li>
<li>
<p>use other list [50%]</p>
<div class="ulist checklist">
<ul class="checklist">
<li>
<p><i class="fa fa-square-o"></i> item one</p>
</li>
<li>
<p>[X] item two</p>
<div class="ulist">
<ul>
<li>
<p>Schedules
SCHEDULED: &lt;2018-05-15 Tue&gt;
use ctrlc ctrls to append a datetime
move cursor on the datetime and use shift left / right to change the value</p>
</li>
<li>
<p>commands (spc spc my_super_command)
org-md-export-to-markdown     - export to a text file with markdown syntax (my_file.md)</p>
</li>
<li>
<p>LaTex integration</p>
</li>
</ul>
</div>
</li>
<li>
<p>Characters: \alpha \rightarrow \beta</p>
</li>
<li>
<p>$O(n \log n)$</p>
<div class="literalblock">
<div class="content">
<pre>\begin{align*}
  3 * 2 + 1 &amp;= 6 + 1\\
           &amp;= 7
\end{align*}</pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Spc commands</p>
<div class="ulist">
<ul>
<li>
<p>Spacemacs config
spc fed  - edit spacemacs dotfile
spc feR  - reload spacemacs config</p>
</li>
<li>
<p>toogle
spc tn    - toogle line number</p>
</li>
<li>
<p>UI toogles
spc TF    - toogle fullscreen mode</p>
</li>
<li>
<p>file
spc ft    - toogle neotree
spc ff    - open file</p>
</li>
<li>
<p>project
Create en empty file named .projectile in your project root directory</p>
<div class="literalblock">
<div class="content">
<pre>spc pp    - switch project
spc pf    - find a file in your project
spc /     - find text in project</pre>
</div>
</div>
</li>
<li>
<p>buffer
spc tab   - last buffer
spc bn    - next buffer
spc bb    - show the list of current buffers
spc bd    - delete buffer</p>
</li>
<li>
<p>window
spc wS    - split windows vertical
spc nb of window - switch to &lt;number of window&gt;
spc wc    - close a window</p>
</li>
<li>
<p>git
spc gs    - git statu</p>
</li>
<li>
<p>shell
spc '     - toogle the little shell</p>
</li>
<li>
<p>others
spc h[x]  - help on [x]
spc zX    - increase decrease font size</p>
</li>
<li>
<p>: commands
:shell    - start a shell in a buffer</p>
</li>
</ul>
</div>
</li>
<li>
<p>Packages</p>
<div class="literalblock">
<div class="content">
<pre>spc spc package-install to install a package</pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>En tete a mettre en haut d'un fichier org pour les marges etc
[org]
----
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage[hidelinks]{hyperref}
#+LATEX_HEADER: \usepackage{palatino}
----</pre>
</div>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>]]></description><link>https://remi-hernandez.github.io/2018/05/16/Spacemacs.html</link><guid isPermaLink="true">https://remi-hernandez.github.io/2018/05/16/Spacemacs.html</guid><category><![CDATA[spacemacs]]></category><category><![CDATA[tips]]></category><category><![CDATA[shortcuts]]></category><dc:creator><![CDATA[Remi Hernandez]]></dc:creator><pubDate>Wed, 16 May 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Qml tips]]></title><description><![CDATA[<div class="paragraph">
<p>In an item (A) which handle the position of his sons (B, BB, BBB) (e.g.: a RowLayout) you don&#8217;t have to put anchors.fill: parent to one of the sons, if you do this the son&#8217;s position management will be broken.</p>
</div>
<div class="paragraph">
<p>In this example the rectangle B is used to do a background which is wrong, the right solution is to put this rectangle at the root, as a parent of the RowLayout.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">RowLayout {
 	id: A
    Rectangle {
    	id: B
        anchors.fill: parent // don't do this !
        color: "red"
    }

    Rectangle {
    	id: BB
    }

    Rectangle {
    	id: BBB
    }
}</code></pre>
</div>
</div>]]></description><link>https://remi-hernandez.github.io/2018/04/06/Qml-tips.html</link><guid isPermaLink="true">https://remi-hernandez.github.io/2018/04/06/Qml-tips.html</guid><category><![CDATA[Qt]]></category><category><![CDATA[Qml]]></category><dc:creator><![CDATA[Remi Hernandez]]></dc:creator><pubDate>Fri, 06 Apr 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Cmd tips]]></title><description><![CDATA[<div class="sect2">
<h3 id="_sizes">Sizes</h3>
<div class="paragraph">
<p>know the size of a folder</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">du -sh my_lib/movies # h for human and s for the folder only</code></pre>
</div>
</div>
<div class="paragraph">
<p>know the disk usage</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">df -h</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_arborescence">Arborescence</h3>
<div class="paragraph">
<p>Display arborescence on 2 row</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">tree . -L 2</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_text_play">Text play</h3>
<div class="paragraph">
<p>Substring text</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">path="/tyt/tit/tat"
lawl=${path##*/}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_remove_files_except">Remove files except</h3>
<div class="paragraph">
<p>works on bash only :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" data-lang="shell">$ shopt -s extglob
$ ls
asd  d  erg  gf  jwpw  poc  t  ta.py  toto.py  tu  w  wefgj
$ rm !(*.py)
$ ls
ta.py  toto.py</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_docker">Docker</h3>
<div class="paragraph">
<p>move docker (var/lib) : <a href="https://linuxconfig.org/how-to-move-docker-s-default-var-lib-docker-to-another-directory-on-ubuntu-debian-linux" class="bare">https://linuxconfig.org/how-to-move-docker-s-default-var-lib-docker-to-another-directory-on-ubuntu-debian-linux</a></p>
</div>
<div class="paragraph">
<p><a href="https://hub.docker.com/r/linuxserver/plex/" class="bare">https://hub.docker.com/r/linuxserver/plex/</a></p>
</div>
<div class="paragraph">
<p><a href="https://www.htpcbeginner.com/install-plex-using-docker/" class="bare">https://www.htpcbeginner.com/install-plex-using-docker/</a></p>
</div>
<div class="paragraph">
<p>ssh tunnel plex :
<a href="https://plaza.quickbox.io/t/setting-up-an-ssh-tunnel-for-plex/135" class="bare">https://plaza.quickbox.io/t/setting-up-an-ssh-tunnel-for-plex/135</a></p>
</div>
</div>]]></description><link>https://remi-hernandez.github.io/2017/10/27/Cmd-tips.html</link><guid isPermaLink="true">https://remi-hernandez.github.io/2017/10/27/Cmd-tips.html</guid><category><![CDATA[bash]]></category><category><![CDATA[commands]]></category><category><![CDATA[tips]]></category><category><![CDATA[unix]]></category><dc:creator><![CDATA[Remi Hernandez]]></dc:creator><pubDate>Fri, 27 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Tools / usefull softwares]]></title><description><![CDATA[<div class="sect2">
<h3 id="_powerpoint_like_presentation_on_linux">Powerpoint like presentation on linux</h3>
<div class="paragraph">
<p><a href="https://github.com/Philip-Scott/Spice-up" class="bare">https://github.com/Philip-Scott/Spice-up</a></p>
</div>
</div>
<div class="sect2">
<h3 id="_disk_space">Disk space</h3>
<div class="paragraph">
<p>windows : winDirStat <a href="https://windirstat.net/download.html" class="bare">https://windirstat.net/download.html</a></p>
</div>
</div>
<div class="sect2">
<h3 id="_meld">Meld</h3>
<div class="paragraph">
<p>tool to merge files with svn : <a href="http://meldmerge.org/" class="bare">http://meldmerge.org/</a></p>
</div>
</div>
<div class="sect2">
<h3 id="_crash_analyse_on_windows">Crash analyse on windows</h3>
<div class="paragraph">
<p>"observateur d'évènements" journaux windows, application, il y a un log assez détaillé sur les crash</p>
</div>
</div>]]></description><link>https://remi-hernandez.github.io/2017/10/03/Tools-usefull-softwares.html</link><guid isPermaLink="true">https://remi-hernandez.github.io/2017/10/03/Tools-usefull-softwares.html</guid><category><![CDATA[tools]]></category><category><![CDATA[sowftware]]></category><category><![CDATA[utils]]></category><dc:creator><![CDATA[Remi Hernandez]]></dc:creator><pubDate>Tue, 03 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[DB tips]]></title><description><![CDATA[<div class="sect2">
<h3 id="_what_s_here">What&#8217;s here ?</h3>
<div class="paragraph">
<p>Here you will find some tips n tricks around database requests.</p>
</div>
<div class="paragraph">
<p>Easy request to select stuff which contains a word in a text field</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sql" data-lang="sql">SELECT * FROM my_funky_table WHERE text_field LIKE '%my_word%'</code></pre>
</div>
</div>
</div>]]></description><link>https://remi-hernandez.github.io/2017/09/29/DB-tips.html</link><guid isPermaLink="true">https://remi-hernandez.github.io/2017/09/29/DB-tips.html</guid><category><![CDATA[db]]></category><category><![CDATA[sql]]></category><category><![CDATA[tips]]></category><dc:creator><![CDATA[Remi Hernandez]]></dc:creator><pubDate>Fri, 29 Sep 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Send a mail on gmail via python]]></title><description><![CDATA[<div class="paragraph">
<p>Code to send a mail via gmail with an attachment</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
from email.MIMEBase import MIMEBase
from email import encoders


fromaddr = ""
toaddr = ""
PASSWORD = ""

msg = MIMEMultipart()

msg['From'] = fromaddr
msg['To'] = toaddr
msg['Subject'] = "python test"

body = """Hey bro, that's a test ! \o/"""

msg.attach(MIMEText(body, 'plain'))

filename = "test.zip"
attachment = open(r'D://test.zip', "rb")

part = MIMEBase('application', 'octet-stream')
part.set_payload((attachment).read())
encoders.encode_base64(part)
part.add_header('Content-Disposition', "attachment; filename= %s" % filename)

msg.attach(part)

server = smtplib.SMTP('smtp.gmail.com', 587)
server.starttls()
server.login(fromaddr, PASSWORD)
text = msg.as_string()
server.sendmail(fromaddr, toaddr, text)
server.quit()</code></pre>
</div>
</div>]]></description><link>https://remi-hernandez.github.io/2017/07/18/Send-a-mail-on-gmail-via-python.html</link><guid isPermaLink="true">https://remi-hernandez.github.io/2017/07/18/Send-a-mail-on-gmail-via-python.html</guid><category><![CDATA[python]]></category><category><![CDATA[mail]]></category><dc:creator><![CDATA[Remi Hernandez]]></dc:creator><pubDate>Tue, 18 Jul 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Vim tips and shortcuts]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Vim</p>
</div>
<div class="paragraph">
<p><a href="http://www.thegeekstuff.com/2009/04/ctags-taglist-vi-vim-editor-as-sourece-code-browser/" class="bare">http://www.thegeekstuff.com/2009/04/ctags-taglist-vi-vim-editor-as-sourece-code-browser/</a></p>
</div>
<div class="paragraph">
<p>NerdTree : <a href="http://ngressier.developpez.com/articles/vim/vim-plugin-nerdtree/" class="bare">http://ngressier.developpez.com/articles/vim/vim-plugin-nerdtree/</a>
           nmap &lt;silent&gt; &lt;C-D&gt; :NERDTreeToggle&lt;CR&gt; "remap l&#8217;ouverture de nerdtree (ctrl-e devient ctrl-d) (si tu as spf13 commente la ligne map &lt;C-e&gt; &lt;plug&gt;Ne[&#8230;&#8203;]
soluce : map &lt;F9&gt; &lt;plug&gt;NERDTreeToggle&lt;CR&gt;</p>
</div>
<div class="paragraph">
<p>multipaste : <a href="https://stackoverflow.com/questions/7163947/paste-multiple-times" class="bare">https://stackoverflow.com/questions/7163947/paste-multiple-times</a></p>
</div>
<div class="paragraph">
<p><a href="https://dougblack.io/words/a-good-vimrc.html" class="bare">https://dougblack.io/words/a-good-vimrc.html</a> | config
liens op : <a href="http://vimcasts.org/" class="bare">http://vimcasts.org/</a></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_qt_creator_config">qt-creator config</h3>
<div class="paragraph">
<p>alt v, alt v : active / désactive fake vim</p>
</div>
<div class="paragraph">
<p>dans options / editeur de texte / completion / active completion : manually avec ctrl espace comme ça la popup ne gène pas lors de petites modifs pour le echap (double echap, un pour la popup et un pour mode commande).</p>
</div>
<div class="paragraph">
<p>ajouter dans fakeVim/command mapping : Run run</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="https://remi-hernandez.github.io/images/screen_options_vim_qt.png" alt="options screen" width="500" height="500"></span></p>
</div>
<div class="paragraph">
<p>dans le _vimrc (outils/options/fakeVim/lire .vimrc depuis&#8230;&#8203;)</p>
</div>
<div class="paragraph">
<p>map qq :run&lt;CR&gt;</p>
</div>
<div class="listingblock">
<div class="content">
<pre>en mode insert (i)

ctrl-w      - supprime le mot précédent le curseur
ctrl-u      - supprime la ligne précédent le curseur

mode commande (esc)

i          - passe en mode insertion avant le curseur
a          - passe en mode insertion après le curseur
ctrl+d     - scroll vers le bas et déplace le curseur vers le bas de mi écran
ctrl+u     - scroll vers le haut et déplace le curseur vers le haut de mi écran
ctrl+e     - scroll vers le bas sans déplacer le curseur
ctrl+y     - scroll vers le haut sans déplacer le curseur
zz         - scroll pour mettre la ligne courante au millieu de l'écran
zt         - idem mais monte en haut de l'ecran
zb         - idem mais descends en bas de l'ecran
^          - se déplace au premier caractère de la ligne
w          - se déplacer au début du mot suivant
e          - se déplacer à la fin du mot suivant
b          - se déplacer au début du mot précédent
cw         - supprime du curseur jusqu'a la fin du mot et passe en mode insert
y 		   - copie la sélection (sélectione avec v)
gv		   - sélectionne la dernière sélection
gvy        - copie la dernière sélection
{ ou }     - se déplacer de paragraphe en paragraphe
%          - aller à l'occurence suivante du caractère (ex accolade fermante)
*          - chercher le mot sur lequel est le curseur
[I         - show lines with matching word under cursor
mk         - mark current position
'k         - move to mark k
d'k        - delete from current position to mark k
f          - f suivi d'une lettre ex : ft va positionner le curseur sur la lettre t suivante dans la ligne, idem mais précédente avec F
J          - Join la ligne suivante à la fin de la courante
R          - passe en mode replace
V          - mode visual : sélectionne la ligne courante
vap        - mode visual sur un paragraphe
v2ap       - to select two paragraphs
dap        - supprime un paragraphe
{ ou }     - se déplace de paragraphe en paragraphe
==         - reindente la ligne courante
ctrl+w / fleche - change de split
/pattern   - cherche le pattern
n          - next pattern
N          - previous pattern
{{ ou }}   - remonte de { en {
- ou +     - monte ou descends de ligne en se mettant au premier caractère de la ligne.
ctrl+g     - cherche le pattern courant
ctrl+n     - autocompletion (et ctrl+p pour aller en arrière)
ctrl+x, ctrl+f - défini l'autocompletion sur les fichiers (path)
      -&gt; /lictrlx, ctrlf bababa / ctrlx, ctrlf etc

cw 	       - change to next word
cc         - change entire line
ce         - change from cursor to end of word
c$         - change to end of line
ci”        - change inside double quotes
ca”        - change around double quotes
cfx        - change until next found occurrence of x

zf         - crée un fold sur la sélection (selectionne les lignes en visual avant)
zo         - open fold
zc         - close fold
zO         - open all folds
zC         - close all folds
zr         - open fold recursivly

Splits :


    Ctrl+W +/-: increase/decrease height
    Ctrl+W &gt;/&lt;: increase/decrease width
    Ctrl+W _: set height (ex. 50&lt;C-w&gt;_)
    Ctrl+W |: set width (ex. 50&lt;C-w&gt;|)
    Ctrl+W =: equalize width and height of all windows

Mode visual:

=       - indente correctement la selection


commandes :

:%s/search_for_this/replace_with_this/c - confirm each change
:e ou :edit monfichier.py - edit le fichier
:find pattern             - trouve le fichier {pattern} and :edit dessus
:find *spec               - en faisant tab, vas proposer tous les fichiers finissant par spec
:set list                 - affiche les espaces avec des $
:set nolist
:edit seul ou :edit!      - reload un fichier (ex : modifié ailleurs) et ! sans tenir compte des modifs (:vsp ou :sp pour avoir les 2 fichiers :3)
:set paste                - passe en mode paste

diff commands
:diffthis                 - passe en mode diff sur le fichier
:diffoff
dp diffput:             puts changes under the cursor into the other file
                        making them identical (thus removing the diff).
do  diffget:            (o =&gt; obtain). The change under the cursor is replaced
                        by the content of the other file making them identical.
]c                      Jump to the next diff
[c

ajouter des ' autour d'un mot (tata devient 'tata') : se mettre au début du mot &lt;esc&gt;ysiw' possibilité de répéter l'action sur un autre mot en se mettant sur le mot suivant et en faisant .

:earlier 2m              - revient en arriere de 2min

tabs :
:tabedit {file}   edit specified file in a new tab
:tabfind {file}   open a new tab with filename given, searching the 'path' to find it
:tabclose         close current tab
:tabclose {i}     close i-th tab
:tabonly          close all other tabs (show only the current tab)
:tabs         list all tabs including their displayed windows
:tabm 0       move current tab to first
:tabm         move current tab to last
:tabm {i}     move current tab to position i+1
{i}gt         go to tab in position i

Basique vim :

$cat ~/.vimrc
set nu
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
set mouse=a
set showcmd
set wildmode=longest,list,full
set wildmenu
set foldmethod=manual
colorscheme peachpuff
colorscheme gruvbox
nnoremap q a"&lt;Esc&gt; -&gt; permet d'avoir la double quote
nnoremap Q i"&lt;Esc&gt;
set path+= **

color gruvbox
set background=dark
execute "set &lt;M-0&gt;=\e0"
map &lt;M-0&gt; &lt;plug&gt;NERDTreeTabsToggle&lt;CR&gt;


Next tab: gt
Prior tab: gT
Numbered tab: nngt

Need to understand / learn :

:b pattern -&gt; lets you autocomplete an
les tags (ctrl + x, ctrl + ] -&gt; autocomplete with tags)
would use ctags and then just use :tag to jump to the definition and :pop to come back

 To stop indenting when pasting with the mouse, add this to your .vimrc:

:set pastetoggle=&lt;f5&gt;

then try hitting the F5 key while in insert mode (or just :set paste).</pre>
</div>
</div>
</div>]]></description><link>https://remi-hernandez.github.io/2017/04/04/Vim-tips-and-shortcuts.html</link><guid isPermaLink="true">https://remi-hernandez.github.io/2017/04/04/Vim-tips-and-shortcuts.html</guid><category><![CDATA[vim]]></category><category><![CDATA[tips]]></category><category><![CDATA[shortcuts]]></category><dc:creator><![CDATA[Remi Hernandez]]></dc:creator><pubDate>Tue, 04 Apr 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Python unit tests]]></title><description><![CDATA[<div class="sect3">
<h4 id="_why">Why ?</h4>
<div class="paragraph">
<p>You know why because if you don&#8217;t what are you doing here ?</p>
</div>
</div>
<div class="sect3">
<h4 id="_using_unittest_library">Using unittest library</h4>
<div class="sect4">
<h5 id="_a_basic_example">A basic example :</h5>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">import unittest

def f1(a, b):
    return a + b

class TestF1(unittest.TestCase):
    '''
    This class will test f1
    '''

    def test_f1(self):
        res = f1(2, 4)
        self.assertEqual(res, 6)

if __name__ == '__main__':
    unittest.main()</code></pre>
</div>
</div>
<div class="paragraph">
<p>And this will result in :</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Ran 1 test in 0.001s
OK</pre>
</div>
</div>
</div>
<div class="sect4">
<h5 id="_what_happens_if_the_test_fails">What happens if the test fails :</h5>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">	# modify the value in the assertEqual
	def test_f1(self):
        res = f1(2, 4)
        self.assertEqual(res, 3)</code></pre>
</div>
</div>
<div class="paragraph">
<p>The output is now :</p>
</div>
<div class="listingblock">
<div class="content">
<pre>======================================================================
FAIL: test_f1 (tmp.TestF1)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\Users\rhz\PycharmProjects\panda\tmp.py", line 16, in test_f1
    self.assertEqual(res, 3)
AssertionError: 6 != 3

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
Process finished with exit code 0</pre>
</div>
</div>
</div>
<div class="sect4">
<h5 id="_using_setup_and_teardown">Using setUp and tearDown</h5>
<div class="paragraph">
<p>The doc says :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>setUp(): method called to prepare the test fixture. This is called immediately before calling the test method</p>
</li>
<li>
<p>tearDown(): method called immediately after the test method has been called and the result recorded. This is called even if the test method raised an exception</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This is a stupid example because here setUp is sufficient but in more complex situation tearDown alows us to clean the thing after a test or to do whatever you want.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">def f1(a, b):
    return a + b


class TestF1(unittest.TestCase):
    '''
    This class will test f1
    '''

    def setUp(self):
        self.good_value = 6

    def tearDown(self):
        self.good_value = 6

    def test_f1(self):
        res = f1(2, 4)
        self.assertEqual(res, self.good_value)

    def test_f1_with_bad_value(self):
        res = f1(2, 4)
        self.good_value = 3
        self.assertEqual(res, self.good_value)

if __name__ == '__main__':
    unittest.main()</code></pre>
</div>
</div>
<div class="paragraph">
<p>The output :</p>
</div>
<div class="listingblock">
<div class="content">
<pre>======================================================================
FAIL: test_f1_with_bad_value (tmp.TestF1)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\Users\rhz\PycharmProjects\untitled\tmp.py", line 23, in test_f1_with_bad_value
    self.assertEqual(res, self.good_value)
AssertionError: 6 != 3

----------------------------------------------------------------------
Ran 2 tests in 0.001s

FAILED (failures=1)</pre>
</div>
</div>
<div class="paragraph">
<p>Url to the doc : <a href="https://docs.python.org/3/library/unittest.html#test-cases" class="bare">docs.python.org/3/library/unittest.html#test-cases</a></p>
</div>
</div>
</div>]]></description><link>https://remi-hernandez.github.io/2017/04/04/Python-unit-tests.html</link><guid isPermaLink="true">https://remi-hernandez.github.io/2017/04/04/Python-unit-tests.html</guid><category><![CDATA[python]]></category><category><![CDATA[unit tests]]></category><dc:creator><![CDATA[Remi Hernandez]]></dc:creator><pubDate>Tue, 04 Apr 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Python regex]]></title><description><![CDATA[<div class="sect3">
<h4 id="_sub">sub()</h4>
<div class="paragraph">
<p>Change a value by another with sub.
We will rewrite the sentence in order to write the group1 followed by "pipou"</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">import re

test = "56test"

# this will write the first group of the regex followed by pipou in test string
print re.sub(r"([0-9]{2})([a-z]{4})", r"\g&lt;1&gt;pipou", test)

#&gt;&gt;'56pipou'</code></pre>
</div>
</div>
<div class="paragraph">
<p>The same thing by compiling first :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">import re

test = "56test"

# this will replace the first group of the regex by pipou in test string
regex = re.compile(r"([0-9]{2})([a-z]{4})")
print regex.sub(r"\g&lt;1&gt;pipou", test)

#&gt;&gt;'56pipou'</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_change_stuff_in_a_file_with_regex">change stuff in a file with regex</h4>
<div class="paragraph">
<p>Example - changing the number 183200 of the first line to 201600 in multiples files containing multiple texts like this</p>
</div>
<div class="paragraph">
<p>WSCI31 RCTP 183200
RCAA SIGMET 2 VALID 190500/190900 RCTP-
RCAA TAIPEI FIR EMBD TS FCST
WI N2630 E11730 - N2800 E12400 - N2400 E12400 - N2500 E11730
TOP FL410 MOV E 10KT NC</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">    import re

    file_list = ["6420.txt", "6421.txt" ,"6422.txt" ,"6423.txt" ,"6440.txt"
        ,"6441.txt" ,"6442.txt" ,"6443.txt" ,"6444.txt" ,"6445.txt"
        ,"6446.txt" ,"6447.txt" ,"6448.txt" ,"6449.txt" ,"6450.txt"
        ,"6451.txt" ,"6452.txt" ,"6453.txt", "6454.txt"]

    new_date = str(input("enter a new date&gt;"))
    regex = re.compile(r"((WC|WS|WV)[A-Z]{2}\d{2})\s+([A-Z]{4})\s+([0-9]{6})\s+(CC[AB])?")

    for sigmet in file_list:
        file_name = "./" + sigmet

        f = open(file_name, "r")
        content = f.read()
        # we will write the groups 1 and 3 follwed by the new date
        new_content = regex.sub(r"\1 \3 " + new_date + r"\n", content)
        f.close()

        f = open(file_name, "w")
        f.write(new_content)
        f.close()</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_findall">findall()</h4>
<div class="paragraph">
<p>This function find all occurences of a pattern.
Note at the end of the regex : <code>?![\(,]).|\s)*[\(,]</code> this part will look for every character except '(' and ','.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">def get_sigmets_in_string_list(string_to_parse):
    compiled_regex = re.compile(r'(((((WC|WS|WV)[A-Z]{2}\d{2})\s+([A-Z]{4})\s+([0-9]{6})\s+(CC[AB])?)(([A-Z]{4})\s+SIGMET\s+((\w+\s+){1,})VALID\s+(([0-9]{6})\/([0-9]{6}))\s+([A-Z]{4}-))((?![\(,]).|\s)*[\(,]))')
    sigmet_list = compiled_regex.findall(string_to_parse)
    cleaned_list = []
    for sigmet in sigmet_list:
        tmp_list = list(sigmet[0])
        tmp_list[len(tmp_list) - 1] = '='
        cleaned_list.append("".join(tmp_list))

    #for sigmet in cleaned_list:
    #    print("\n\nsigmet : [{}]".format(sigmet))

    return cleaned_list</code></pre>
</div>
</div>
</div>]]></description><link>https://remi-hernandez.github.io/2017/04/04/Python-regex.html</link><guid isPermaLink="true">https://remi-hernandez.github.io/2017/04/04/Python-regex.html</guid><category><![CDATA[python]]></category><category><![CDATA[regex]]></category><dc:creator><![CDATA[Remi Hernandez]]></dc:creator><pubDate>Tue, 04 Apr 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[C/C++ tips]]></title><description><![CDATA[<div class="sect2">
<h3 id="_what_s_here">What&#8217;s here ?</h3>
<div class="paragraph">
<p>Here you will find some tips n tricks around C++.</p>
</div>
</div>
<div class="sect2">
<h3 id="_ternary">Ternary</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">bool test = true;

(test) ? std::cout &lt;&lt; "yes" : std::cout &lt;&lt; "no"; // will print yes</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_get_int_len_on_linux_and_windows">Get int* len on linux and windows</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#include &lt;stdio.h&gt;
#include &lt;malloc.h&gt;

#ifdef linux
#define array_size(x) malloc_usable_size(x)
#endif

#ifdef _WIN32
#define array_size(x) _msize(x)
#endif

int main(int argc, char**argv)
{
    int         len;
    int         *array = malloc(sizeof(int)*10);

    len = array_size(array);
    len = len / 4; 				// because array_size return size_t

    printf("len : %d\n", len);
    return(0);
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_two_ways_to_iterate">Two ways to iterate</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">std::vector&lt;double&gt; latWayPoints;
// fill vector

for (std::vector&lt;double&gt;::iterator it = latWaypoints.begin(); it != latWaypoints.end(); ++it)
    qDebug() &lt;&lt; "&gt;&gt; latWay : " &lt;&lt; *it;

for (double lon: lonWaypoints)
    qDebug() &lt;&lt; "&gt;&gt; latWay : " &lt;&lt; lon;</code></pre>
</div>
</div>
<div class="sect3">
<h4 id="_cpp_method_callable_from_qml">cpp method callable from qml</h4>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">// .h
Q_INVOKABLE void my_function();


//.cpp
void my_class::my_function()
{
  // do stuff
}

//.qml
onMyEvent: {
    item.my_function();
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_cast">cast</h3>
<div class="paragraph">
<p>dynamic_cast pour les classes héritées surtout,
static_cast pour les types de base,
reinterpret_cast pour forcer un cast de n&#8217;importe quoi vers n&#8217;importe quoi
et const_cast pour pouvoir passer des string en entrée à des vieilles fonctions C qui veulent des char*</p>
</div>
</div>
<div class="sect2">
<h3 id="_concat_arrays_c_style_in_c">Concat arrays C style in C++</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">void concatArrays(unsigned char * &amp;src, int dstOffset, unsigned char * dst)
{
    int j = 0;
    int i = 0;
    int srcLen =  strlen(reinterpret_cast&lt;char *&gt;(src));
    int dstLen =  strlen(reinterpret_cast&lt;char *&gt;(dst));
    unsigned char * tmp = new unsigned char [srcLen + dstLen + 1];


    for (i = 0; i &lt; srcLen; ++i)
    {
       tmp[i] = src[i];
    }

    i = dstOffset;

    while (j &lt; dstLen &amp;&amp; i &lt; (srcLen + dstLen + 1))
    {
        tmp[i] = dst[j];
        i++;
        j++;
    }

    delete [] src;
    src = tmp;
}

void test(unsigned char * buffer, unsigned char * append)
{
  std::cout &lt;&lt; "buffer : " &lt;&lt; buffer &lt;&lt; std::endl;
  concatArrays(buffer, 4, append);
  std::cout &lt;&lt; "buffer -&gt; : " &lt;&lt; buffer &lt;&lt; std::endl;
}

int main()
{
  char * buffer = new char [5];
  char * append = new char [10];

  strcpy(buffer, "tato");
  strcpy(append, "chipolata");

  test(reinterpret_cast&lt;unsigned char *&gt;(buffer), reinterpret_cast&lt;unsigned char *&gt;(append));
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_pragma_and_warnings">Pragma and warnings</h3>
<div class="paragraph">
<p>You can use pragma to lower the warnings level at build time or to disable some kinds of warnings.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#pragma warning(push,0)
// here include libs that you can't touch and you don't want build warnings from
#include &lt;fstream&gt;
#pragma warning(pop)

// To disable the warnings "deprecated" for C functions like strcpy under windows

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4996)
#endif

strcpy();
#ifdef _MSC_VER
#pragma warning(pop)
#endif</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_create_a_class_to_not_include_it">Create a class to not include it</h3>
<div class="paragraph">
<p>When you have namespace tata with in it namespace tutu and in it a class myClass and you want to have a pointer of myClass type in a class, to faster the build in .h don&#8217;t include the "myClass.h", include it only in cpp and prefer this way :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp"># include &lt;someStuff&gt;

namespace tata { namespace tutu {
	class myClass;
}}

class testClass
{
public:
	testClass();

private:
	tata::tutu::myClass * _myPtr;
};</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_random_between_min_and_max">Random between min and max</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#include &lt;iostream&gt;
#include &lt;time.h&gt;

int main()
{
  int min = 5;
  int max = 10;

  srand(time(NULL));
  int random = ( rand() % ( max - min + 1 ) ) + min;
  std::cout &lt;&lt; random &lt;&lt; std::endl;
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_osg_geometry_usage">osg geometry usage</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">#include &lt;osgEarthFeatures/Feature&gt;
#include &lt;osgEarthFeatures/GeometryUtils&gt;

std::string wkt_geom; // geom at wkt format

osgEarth::Symbology::Geometry geom = osgEarth::Features::GeometryUtils::geometryFromWKT(wkt_geom);</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_map_iterations">map iterations</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">QMap&lt;QString, QString&gt; myMap;

for (auto map : myMap.toStdMap()) {
	qDebug() &lt;&lt; "key : " &lt;&lt; map.first &lt;&lt; " value : " &lt;&lt; map.second;
}

for (auto mapKey : myMap.keys()) {
	qDebug() &lt;&lt; "key : " &lt;&lt; mapKey &lt;&lt; " value : " &lt;&lt; myMap.value(mapKey);
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_const">Const</h3>
<div class="sect4">
<h5 id="_const_function">const function</h5>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">int foo::bar(int random_arg) const;
// can be understood as a declaration with a this const pointer
// -&gt; no modification of member variables are possible.</code></pre>
</div>
</div>
<div class="paragraph">
<p>A "const function", denoted with the keyword const after a function declaration, makes it a compiler error for this class function to change a member variable of the class. However, reading of a class variables is ok inside of the function, but writing inside of this function will generate a compiler error.</p>
</div>
</div>
<div class="sect4">
<h5 id="_const_returned_value">const returned value</h5>
<div class="paragraph">
<p>In C, because function return values, and qualifying values is meaningless.
It may be different in C++, check other answers.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">const int i = (const int)42; /* meaningless, the 42 is never gonna change */
int const foo(void); /* meaningless, the value returned from foo is never gonna change */

// Only objects can be meaningfully qualified.

const int *ip = (const int *)&amp;errno; /* ok, `ip` points to an object qualified with `const` */
const char *foo(void); /* ok, `foo()` returns a pointer to a qualified object */</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that for class types, the const for return values is not meaningless, as you are allowed to call modifying member functions on non-const rvalues. (We just had this here with strings the other day: (s1+s2).append(s3).) As usual, litb&#8217;s answer explains all this both in detail and correctness.</p>
</div>
</div>
</div>]]></description><link>https://remi-hernandez.github.io/2016/10/30/CC-tips.html</link><guid isPermaLink="true">https://remi-hernandez.github.io/2016/10/30/CC-tips.html</guid><category><![CDATA[c]]></category><category><![CDATA[c++]]></category><category><![CDATA[tips]]></category><dc:creator><![CDATA[Remi Hernandez]]></dc:creator><pubDate>Sun, 30 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Google maps zoom theory and example with {C++/qt ; QWT}]]></title><description><![CDATA[<div class="sect4">
<h5 id="_theory">Theory</h5>
<div class="paragraph">
<p>Recently I had to set up a zoom on a qwt plot, the goal was to get the same zoom as google maps when zooming on some coordinates.</p>
</div>
<div class="paragraph">
<p>qwt plot example :</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="https://remi-hernandez.github.io/images/qwt_plot.png" alt="qwt plot" width="500" height="500"></span></p>
</div>
<div class="paragraph">
<p>Open maps and test, put your cursor on a city and zoom, all the map will be zoomed but the city will always be under your cursor.</p>
</div>
<div class="paragraph">
<p>The solution is easy, the main idea is to reset your scales with a factor (ex : 0.9 or 1.1) and to apply a part of the factor by using the position of the cursor in order to get the zoom or unzoom.</p>
</div>
<div class="paragraph">
<p>We will assume that the x axis is the horizontal and y the vertical.
So if we want to zoom on the point which is at (1, 2.5)  [(x, y)] we will :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>get the position of our cursor on the widget (x_cursor, y_cursor)</p>
</li>
<li>
<p>define the percentage (x_percent, y_percent) which are the percentage of the x_cursor position and the x_cursor_max position (size max of the widget) and the same for y_percent with y_cursor and y_cursor_max.</p>
</li>
<li>
<p>we will compute the new x scale with x_percent of the factor on a side and 100 - x_percent of the factor for the other side and do the same for the y scale with y_percent / the factor.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>After processing all of this we will have the x axis scale [0.2, 4] and the y axis scale [0.4, 8.5].</p>
</div>
</div>
<div class="sect3">
<h4 id="_code_with_c_qt_and_qwt_library">Code with c++/qt and qwt library :</h4>
<div class="paragraph">
<p>This code is based on the <strong>PlotMagnifier::rescale(double factor);</strong> function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-cpp" data-lang="cpp">void My_PlotMagnifier::rescale_on_cursor(double factor,      // the rescale factor (0.9 or 1.1)
                                         int x_cursor,       // the x, y position of the cursor
                                         int y_cursor,
                                         QSize parent_size)  // the max size of the widget
{
    QwtPlot* plt = plot();

    // max size of the widget
    float x_cursor_max = parent_size.width();
    float y_cursor_max = parent_size.height();

    // percentage position of the cursor in the widget
    float x_percent = (x_cursor * 100) / x_cursor_max;
    float y_percent = (y_cursor * 100) / y_cursor_max;

    // will be the new lowerBound and upperBound of the scales
    float delta_1 = 0;
    float delta_2 = 0;

    _plotScaleEngine-&gt;zoomed(true);
    bool doReplot = false;
    const bool autoReplot = plt-&gt;autoReplot();
    plt-&gt;setAutoReplot( false );

    for ( int axisId = 0; axisId &lt; QwtPlot::axisCnt; axisId++ )
    {
        const QwtScaleDiv &amp;scaleDiv = plt-&gt;axisScaleDiv( axisId );
        if ( isAxisEnabled( axisId ) )
        {
            double center = scaleDiv.lowerBound() + scaleDiv.range() / 2;	// Here we set the center of the scale
            const double width_2 = scaleDiv.range() / 2 * factor;			// the width wanted between lowerBound (or upper) and the center
            float interval = (scaleDiv.range() / 2) - width_2;				// the interval between the old width and the wanted width

            if (axisId == 0) 		// y - left
            {
                delta_1 = (center - width_2) + (((100 - y_percent) * interval) / 100) - interval;
                delta_2 = (center + width_2) - ((y_percent * interval) / 100) + interval;
            }
            else if (axisId == 2) 	// x - bottom
            {
                delta_1 = (center - width_2) + (((x_percent * interval) / 100)) - interval;
                delta_2 = (center + width_2) - (((100 - x_percent) * interval) / 100) + interval;
            }
            else
            {
                delta_1 = 0;
                delta_2 = 0;
            }
            plt-&gt;setAxisScale(axisId, delta_1, delta_2);
            doReplot = true;
        }
    }
    plt-&gt;setAutoReplot( autoReplot );
    if ( doReplot )
        plt-&gt;replot();
}

void Gr_PlotMagnifier::widgetWheelEvent(QWheelEvent *WheelEvent)
{
    _plotScaleEngine-&gt;getPlot()-&gt;select();
    QSize parent_size = this-&gt;parentWidget()-&gt;size();

    if (WheelEvent-&gt;delta() &gt; 0) 	// unzoom
        rescale_on_cursor(0.9, WheelEvent-&gt;x(), WheelEvent-&gt;y(), parent_size);
    else 							// zoom
        rescale_on_cursor(1.1, WheelEvent-&gt;x(), WheelEvent-&gt;y(), parent_size);
}</code></pre>
</div>
</div>
</div>]]></description><link>https://remi-hernandez.github.io/2016/10/23/Google-maps-zoom-theory-and-example-with-Cqt-QWT.html</link><guid isPermaLink="true">https://remi-hernandez.github.io/2016/10/23/Google-maps-zoom-theory-and-example-with-Cqt-QWT.html</guid><category><![CDATA[c++]]></category><category><![CDATA[qwt plot]]></category><category><![CDATA[qt]]></category><category><![CDATA[zoom]]></category><category><![CDATA[google maps]]></category><dc:creator><![CDATA[Remi Hernandez]]></dc:creator><pubDate>Sun, 23 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Python tips]]></title><description><![CDATA[<div class="sect3">
<h4 id="_what_s_here">What&#8217;s here ?</h4>
<div class="paragraph">
<p>Here you will find some tips n tricks around python.</p>
</div>
</div>
<div class="sect3">
<h4 id="_list_tricks">List tricks</h4>
<div class="sect5">
<h6 id="_print_a_list_in_one_line">Print a list in one line</h6>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">&gt;&gt;&gt; l = ["a", "b", "c"]
&gt;&gt;&gt; ";".join(l)
'a;b;c'

&gt;&gt;&gt; l = [1, 2, 3]
&gt;&gt;&gt; "".join(str(l))
'[1, 2, 3]'</code></pre>
</div>
</div>
</div>
<div class="sect5">
<h6 id="_get_the_last_elem_or_go_back_in_a_list">Get the last elem or go back in a list</h6>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">l = ["a", "b", "c"]
print (l[-1]) # Get the last element of the list which will print "c"
print (l[-2]) # Will print "b"</code></pre>
</div>
</div>
</div>
<div class="sect5">
<h6 id="_get_all_the_odd_numbers_of_a_list">Get all the odd numbers of a list</h6>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">&gt;&gt;&gt; l = [0, 1, 2, 3, 4, 5]
&gt;&gt;&gt; l[1::2] # start the list at 1 and go +2 on the iterator
[1, 3, 5]</code></pre>
</div>
</div>
</div>
<div class="sect5">
<h6 id="_reverse_a_full_list">Reverse a full list</h6>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">&gt;&gt;&gt; l
[0, 1, 2, 3, 4, 5]
&gt;&gt;&gt; l = l[::-1]
&gt;&gt;&gt; l
[5, 4, 3, 2, 1, 0]</code></pre>
</div>
</div>
</div>
<div class="sect5">
<h6 id="_remove_duplicates_in_a_list">Remove duplicates in a list</h6>
<div class="paragraph">
<p>Using the builtin set() {Sets are unordered collections of distinct objects} we can remove all the duplicates and to go back in a list we can use the list() function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">&gt;&gt;&gt; l1 = [1, 2, 3, 1, 2, 3]
&gt;&gt;&gt; l1 = set(l1)
&gt;&gt;&gt; l1
set([1, 2, 3])
&gt;&gt;&gt; l1 = list(l1)
&gt;&gt;&gt; l1
[1, 2, 3]</code></pre>
</div>
</div>
</div>
<div class="sect5">
<h6 id="_string_list_to_int_list_in_one_line">string list to int list in one line</h6>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">&gt;&gt;&gt; l = ["1", "2", "3"]
&gt;&gt;&gt; l = [int(x) for x in l]
&gt;&gt;&gt; l
[1, 2, 3]</code></pre>
</div>
</div>
</div>
<div class="sect5">
<h6 id="_remove_empty_string_in_a_list">Remove empty string in a list</h6>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">&gt;&gt;&gt; l = ["a", "", "b"]
&gt;&gt;&gt; l
['a', '', 'b']
&gt;&gt;&gt; l = [x for x in l if x]
&gt;&gt;&gt; l
['a', 'b']</code></pre>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_ternary_in_python">Ternary in python</h4>
<div class="paragraph">
<p>Added in 2.5 version of python :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">a = 1
b = 2
result = 0

result = a if a &gt; b else b
print (result) # will print 2 for b

result = a if a &lt; b else b
print (result) # will print 1 for a

<i class="conum" data-value="1"></i><b>(1)</b>

####

def yes():
	print "yes"

def no():
	print "no"

yes() if True else no()
yes() if False else no()

<i class="conum" data-value="2"></i><b>(2)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Will output :
&gt;
2
1</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Will output :
&gt;
yes
no</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_syntax">Syntax *</h4>
<div class="paragraph">
<p>The single star * unpacks the sequence/collection into positional arguments.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">def sum(a, b):
    return a + b

values = (1, 2)

s = sum(*values) # will return the sum of 1 and 2</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_multilines_import">Multilines import</h4>
<div class="paragraph">
<p>A nice way to import</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">from Package.class import(
        method1,
        method2,
    )</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_how_to_check_if_a_file_with_extension_xx_is_in_a_folder">How to check if a file with extension .xx is in a folder</h4>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">from os import listdir
from os.path import isfile, join

lFilesList = [f for f in listdir(self.__fileName) if isfile(join(self.__fileName, f)) and (join(self.__fileName, f)).endswith(".sda")]
if len(lFilesList) &gt; 0:
   print "There are files"</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_get_items_from_a_list_a_if_not_in_b">Get items from a list a if not in b</h4>
<div class="paragraph">
<p>Use set(b) instead of b, why ?
List membership testing is O(n), Set membership testing is O(1)</p>
</div>
<div class="paragraph">
<p>So if you test list membership in a loop the overall loop is O(n2).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">a = [1, 2, 3, 4 ,5]
b = [4, 5, 6, 7]

res = [x for x in a if x not in set(b)]

# now res is : [1, 2, 3]</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_how_to_check_the_method_existing_in_a_python_object">How to check the method existing in a python object</h4>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">[method_name for method_name in dir(object)
 if callable(getattr(object, method_name))]</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_format_text">Format text</h4>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-python" data-lang="python">&gt;&gt;&gt; s = "hello world"
&gt;&gt;&gt; s.center(40)
&gt;&gt;&gt; '              hello world               '

&gt;&gt;&gt; '{:*^50}'.format('sample text')
'*******************sample text********************'     # * is the fill character.

&gt;&gt;&gt; '{:^50}'.format('sample text')
'                   sample text                    '     # with a length of 50.

&gt;&gt;&gt; x = 13.949999999999999999
&gt;&gt;&gt; x
13.95
&gt;&gt;&gt; g = float("{0:.2f}".format(x))
&gt;&gt;&gt; g
13.95
&gt;&gt;&gt; x == g
True
&gt;&gt;&gt; h = round(x, 2)
&gt;&gt;&gt; h
13.95
&gt;&gt;&gt; x == h
True</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_script_with_arguments">script with arguments</h4>
<div class="paragraph">
<p>Use click library : <a href="http://click.pocoo.org/5/" class="bare">http://click.pocoo.org/5/</a></p>
</div>
</div>]]></description><link>https://remi-hernandez.github.io/2016/10/06/Python-tips.html</link><guid isPermaLink="true">https://remi-hernandez.github.io/2016/10/06/Python-tips.html</guid><category><![CDATA[python]]></category><category><![CDATA[tips]]></category><dc:creator><![CDATA[Remi Hernandez]]></dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 GMT</pubDate></item></channel></rss>